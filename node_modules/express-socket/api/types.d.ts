interface IData {
    readonly bodyType?: string[];
    readonly body: string;
    readonly statusType?: string[];
    readonly status?: number | string;
    readonly id?: string | number;
}
export interface IServer {
    queue: Function;
}
export interface IClient {
    send: Function;
    receive: Function;
    connect: Function;
}
interface ITLS {
    readonly rejectUnauthorized?: boolean;
    readonly public?: string;
    readonly private?: string;
}
export interface IEvent extends IData {
    eventId?: string | number;
    command?: Promise<boolean>;
    readonly name: string;
}
interface INetworkInterface {
    readonly localAddress: string;
}
export interface IConnection extends INetworkInterface {
    readonly client: IClient;
    readonly server: IServer;
}
interface INetworkInterfaceOptions extends IConnection {
}
export interface INetworkOptions extends INetworkInterfaceOptions {
    readonly appspace?: string;
    readonly socketRoot?: string;
    readonly id?: string;
    readonly networkHost?: string;
    readonly networkPort?: number;
    readonly encoding: string;
    readonly rawBuffer?: boolean;
    readonly delimiter?: string;
    readonly sync?: boolean;
    readonly silent?: boolean;
    readonly logInColor?: boolean;
    readonly logDepth?: number;
    readonly logger?: void;
    readonly maxConnections?: number;
    readonly retry?: number;
    readonly maxRetries?: boolean;
    readonly stopRetrying?: boolean;
    readonly unlink?: boolean;
    readonly interfaces?: INetworkInterface;
    readonly tls?: ITLS;
}
export {};
