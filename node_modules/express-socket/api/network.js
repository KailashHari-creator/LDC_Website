var ipc = require('node-ipc');
var _a = require("./types"), IEvent = _a.IEvent, IServer = _a.IServer, IClient = _a.IClient;
var isFunction = require("lodash").isFunction;
var Network = /** @class */ (function () {
    function Network() {
        this.events = (function () { var events = []; return events; })();
        this.names = [];
        this.appspace = 'ciela.';
        this.socketRoot = '/tmp/ciela';
        // private networkHost: string = 'localhost';
        // private networkPort: number = 593;
        this.encoding = 'hex';
        // private rawBuffer: boolean = true;
        this.delimiter = '\f';
        this.sync = false;
        this.silent = false;
        this.logInColor = true;
        this.logDepth = 5;
        this.logger = console.log;
        this.maxConnections = 100;
        this.retry = 1500;
        this.maxRetries = false;
        this.stopRetrying = false;
        this.unlink = true;
        this.running = false;
        this.flag = false;
        this.id = 0;
        this.host = "world";
        this.__ = ipc;
        this.__q = [];
        this.__c = {}
    }
    Network.prototype.queue = function (name, event, callback) {
        var _this = this;
        if (this.flag === false) {
            var index = this.names.indexOf(name);
            this.host = this.id.toString();
            if (index === -1) {
                index = 0;
                this.names.push(name);
            }
            this.id = index;
            if (event) {
                this.__.server.emit(name, event);
                var isFunc = isFunction(callback);
                if (isFunc) {
                    callback();
                }
                else { }
            }
            else {
                var f = function (server) {
                    _this.__.server.on(name, callback);
                };
                this.__q.push(f);
            }
        }
    };
    Network.prototype.send = function (name, event, callback) {
        this.queue(name, event, callback);
    };
    Network.prototype.receive = function (name, callback) {
        this.queue(name, false, callback);
    };
    Network.prototype.serve = function (host, callback) {
        var _this = this;
        this.host = "" + (host || this.__.config.id);
        this.__.config.id = this.host;
        this.__.serve(this.host, function () {
            for (var index = 0; index < _this.__q.length; index++) {
                var exec = _this.__q[index]();
            }
            isFunction(callback) && callback();
        });
        this.__.server.start();
    };
    Network.prototype.setConfig = function(config) {
        for (let key of this.__c) {
            switch (key) {
                case "networkHost":
                    this.__c[key].networkHost = config[key];
                case "retry":
                    this.__c[key].retry =  config[key];
                case "tls":
                    if ((config[key] || {}).add === true) {
                        // dynamatize
                        this.__c[key].tls.trustedConnections.push(config[key]);
                    } else {
                        this.__c[key].tls = config[key];
                    }
                default:
                    break;
            }
        }
    }
    return Network;
}());
var network = new Network();
module.exports = network;
