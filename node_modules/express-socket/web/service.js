'use strict';
import Config from './config';
import { Client } from './client';
var Service = /** @class */ (function () {
    function Service(path, config, log, port) {
        Object.defineProperties(this, {
            config: {
                enumerable: true,
                writable: true,
                value: new Config
            },
            connectTo: {
                enumerable: true,
                writable: false,
                value: connect
            },
            disconnect: {
                enumerable: true,
                writable: false,
                value: disconnect
            },
            of: {
                enumerable: true,
                writable: true,
                value: {}
            },
            server: {
                enumerable: true,
                writable: true,
                configurable: true,
                value: false
            },
            log: {
                enumerable: true,
                writable: false,
                value: log
            }
        });
    }
    return Service;
}());
function log(args) {
    if (this.config.silent) {
        return;
    }
    for (var i = 0, count = args.length; i < count; i++) {
        if (typeof args[i] != 'object') {
            continue;
        }
    }
    this.config.logger(args.join(' '));
}
function disconnect(id) {
    if (!this.of[id]) {
        return;
    }
    this.of[id].explicitlyDisconnected = true;
    this.of[id].off('*', '*');
    if (this.of[id].socket) {
        if (this.of[id].socket.destroy) {
            this.of[id].socket.destroy();
        }
    }
    delete this.of[id];
}
function emptyCallback() {
    //Do Nothing
}
function connect(id, path, callback) {
    if (typeof path == 'function') {
        callback = path;
        path = false;
    }
    if (!callback) {
        callback = emptyCallback;
    }
    if (!id) {
        return;
    }
    if (!path) {
        path = this.config.socketRoot + this.config.appspace + id;
    }
    if (this.of[id]) {
        if (!this.of[id].socket.destroyed) {
            callback();
            return;
        }
        this.of[id].socket.destroy();
    }
    if (this.of[id]) {
        this.of[id].connect();
    }
    callback(this);
}
export default Service;
//# sourceMappingURL=service.js.map