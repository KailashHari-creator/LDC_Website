var Network = /** @class */ (function () {
    function Network(ipc) {
        this.events = (function () { var events = []; return events; })();
        this.names = [];
        this.appspace = 'ciela.';
        this.socketRoot = '/tmp/ciela';
        // private networkHost: string = 'localhost';
        // private networkPort: number = 593;
        this.encoding = 'hex';
        // private rawBuffer: boolean = true;
        this.delimiter = '\f';
        this.sync = false;
        this.silent = false;
        this.logInColor = true;
        this.logDepth = 5;
        this.log = console.log;
        this.maxConnections = 100;
        this.retry = 1500;
        this.maxRetries = false;
        this.stopRetrying = false;
        this.unlink = true;
        this.running = false;
        this.flag = false;
        this.id = -1;
        this.host = "world";
        this.__q = [];
        this.__ = new ipc();
    }
    Network.prototype.queue = function (event, send__receive, callback) {
        var _this = this;
        if (this.flag === false) {
            var index = this.names.indexOf(`${event.name}`);
            if (index === -1) {
                index = 0;
                this.names.push(`${event.name}`);
            }
            this.id = index;
            if (send__receive) {
                var f = function (conn) {
                    conn.of[event.host].emit(event.name, event);
                };
                this.__q.push(f);
            }
            else {
                var f = function (conn) {
                    conn.of[event.host].on(event.name, callback);
                };
                this.__q.push(f);
            }
        }
    };
    Network.prototype.send = function (name, event, callback) {
        this.queue(event, true, callback);
    };
    Network.prototype.receive = function (name, callback) {
        this.queue({
            name: name,
            body: name
        }, false, callback);
    };
     Network.prototype.connect = function (host, callback) {
        var _this = this;
        this.host = "" + (host || this.host)
        this.__.connectTo(this.host, function () {
            console.log(_this.host);
            for (var index = 0; index < _this.__q.length; index++) {
                var exec = _this.__q[index](_this.__);
            }
        });
        callback && callback();
    };
    return Network;
}());
export { Network };
//# sourceMappingURL=network.js.map